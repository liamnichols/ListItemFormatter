lane :update_version do |options|

  version_number = options[:version_number] ||= UI.input "Please provide the version number:"
  release_name = options[:release_name] ||= UI.input "Please provide a name for this release:"
  tag = "v#{version_number}"

  Dir.chdir("..") do
    sh("git", "fetch", "--all")
  end

  UI.user_error! "Version #{version_number} already exists" if git_tag_exists(tag: tag)

  ensure_git_status_clean
  ensure_git_branch(branch: 'master')

  UI.message "Incrementing build number"
  Dir.chdir("..") do
    sh("agvtool", "next-version")
  end

  UI.message "Setting version number: #{version_number}"
  Dir.chdir("..") do
    sh("agvtool", "new-marketing-version", version_number)
  end

  UI.message "Updating Podspec"
  version_bump_podspec(path: "ListItemFormatter.podspec", version_number: version_number)

  git_commit(path: ".", message: "Update version to '#{version_number}'")
  update_docs(version_number: version_number)

  push_to_git_remote

  carthage(command: "build", platform: "all", no_skip_current: true)
  carthage(command: "archive", output: "ListItemFormatter.framework.zip")

  set_github_release(
    repository_name: "liamnichols/ListItemFormatter",
    name: release_name,
    commitish: "master",
    tag_name: tag,
    description: get_changelog,
    upload_assets: ["ListItemFormatter.framework.zip"]
  )

  pod_push(use_bundle_exec: true)
end

lane :get_changelog do

  latest_release = github_api(
    path: "/repos/liamnichols/ListItemFormatter/releases/latest",
    error_handlers: {
      404 => proc do
        UI.message "Latest release does not exist, changelog will be entire commit history"
      end
    }
  )

  git_log = ""
  pretty = "- %s by %an"
  if latest_release[:status] == 200
    last_tag = latest_release[:json]["tag_name"]
    git_log = changelog_from_git_commits(pretty: pretty, between: [last_tag, "HEAD"])
  else
    git_log = changelog_from_git_commits(pretty: pretty, commits_count: 1000)
  end

  commits = git_log.split("\n").select { |c| c[/\(#[0-9]*\)/] }
  changelog = commits.join("\n\n")

  UI.important "CHANGELOG: \n\n#{changelog}"
  changelog
end

lane :test do

  clear_derived_data

  run_tests(scheme: "ListItemFormatter iOS", device: "iPhone XS (12.1)", clean: true)
  run_tests(scheme: "ListItemFormatter iOS", device: "iPhone X (11.4)")
  run_tests(scheme: "ListItemFormatter iOS", device: "iPhone 7 (10.3.1)")
  run_tests(scheme: "ListItemFormatter iOS", device: "iPhone 6s (9.3)")

  run_tests(scheme: "ListItemFormatter tvOS", device: "Apple TV (12.1)", clean: true)

  run_tests(scheme: "ListItemFormatter macOS", destination: "platform=macOS", clean: true)

  carthage(command: "build", platform: "all", no_skip_current: true)
  pod_lib_lint(allow_warnings: true)
end

desc "Update docs and commit changes."
lane :update_docs do |options|

  UI.message "Updating docs..."
  version_number = options[:version_number] || get_version_number(xcodeproj: "ListItemFormatter.xcodeproj", target: "ListItemFormatter iOS")

  ensure_git_status_clean

  Dir.chdir("..") do
    yaml = YAML.load_file(".jazzy.yml")
    yaml["github_file_prefix"] = "https://github.com/liamnichols/ListItemFormatter/blob/v#{version_number}"
    yaml["module_version"] = version_number
    File.open(".jazzy.yml", "w") { |file| YAML.dump(yaml, file) }
  end

  jazzy(config: ".jazzy.yml")

  docs_updated = Dir.chdir("..") do
    has_diff = ! sh("git status --porcelain docs").empty?
    sh("git", "add", ".") if has_diff
    has_diff
  end

  git_commit(path: ".", message: "Update docs to '#{version_number}'") if docs_updated
end

lane :import_data do |options|

  cldr_tag = options[:cldr_tag] ||= UI.input "Please specify the tag representing the CLDR data to import (https://github.com/unicode-cldr/cldr-json/tags):"

  UI.important "Importing CLDR data. Using tag #{cldr_tag}"
  next unless UI.confirm "Performing this task will overwrite the Source/Resources.xcassets directory. Are you sure you would like to continue?"

  import "import_cldr_data.rb"
  import_cldr_data(cldr_tag, "../Source/Resources.xcassets")

  UI.success "Complete!"
  run_tests(scheme: "ListItemFormatter macOS", destination: "platform=macOS", clean: true) if UI.confirm "Would you like to run macOS tests?"
end
